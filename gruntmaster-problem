#!/usr/bin/perl -w
use v5.14;

use Gruntmaster::Data;

use IO::Prompter [ -style => 'bold', '-stdio', '-verbatim' ];
use File::Slurp qw/read_file/;
use JSON qw/encode_json/;
use Term::ANSIColor qw/RED RESET/;
use Getopt::Long qw/:config require_order/;

##################################################

my $dsn = $ENV{GRUNTMASTER_DSN} // 'dbi:Pg:';
my $db = Gruntmaster::Data->connect($dsn);

sub cmd_help{
	exec perldoc => $0
}

sub cmd_add{
	my $id = shift;
	my $name = prompt 'Problem name';
	my $private = prompt('Private?', '-yn') eq 'y';
	my $contest = prompt 'Contest';
	my $author = prompt 'Problem author (full name)';
	my $writer = prompt 'Problem statement writer (full name)';
	my $owner = prompt 'Problem owner (username)';
	my $level = prompt 'Problem level', -menu => "beginner\neasy\nmedium\nhard";
	my $statement = read_file prompt 'File with problem statement', -complete => 'filenames';
	my $generator = prompt 'Generator', -menu => "File\nRun\nUndef";
	my $runner = prompt 'Runner', -menu => "File\nVerifier\nInteractive";
	my $judge = prompt 'Judge', -menu => "Absolute\nPoints";
	my $testcnt = prompt 'Test count', '-i';

	my $timeout = prompt 'Time limit (seconds)', '-n';
	my $olimit = prompt 'Output limit (bytes)', '-i';
	say 'Memory limits are broken, so I won\'t ask you for one';

	my (@tests, $gensource, $genformat, $versource, $verformat);

	if ($generator eq 'Run') {
		$gensource = read_file prompt, '[Generator::Run] Generator file name', -complete => 'filenames';
		$genformat = prompt '[Generator::Run] Generator format', -menu => [qw/C CPP MONO JAVA PASCAL PERL PYTHON/];
	}

	if ($runner eq 'File') {
		my $default = $judge eq 'Points' ? 10 : 'Ok';
		$tests[$_ - 1] = prompt "[Runner::File] Score for test ${_} [$default]", -default => $default for 1 .. $testcnt;
	}

	if ($runner eq 'Verifier' || $runner eq 'Interactive') {
		say RED, 'WARNING: Runner::Interactive is experimental', RESET if $runner eq 'Interactive';
		$versource = prompt "[Runner::$runner] Verifier file name", -complete => 'filenames';
		$verformat = prompt "[Runner::$runner] Verifier format", -menu => [qw/C CPP MONO JAVA PASCAL PERL PYTHON/];
	}

	my %options = (
		id => $id,
		name => $name,
		level => $level,
		statement => $statement,
		author => $author,
		writer => $writer,
		owner => $owner,
		generator => $generator,
		runner => $runner,
		judge => $judge,
		testcnt => $testcnt,
	);
	$options{private} = $private if $private;
	$options{timeout} = $timeout if $timeout;
	$options{olimit} = $olimit if $olimit;
	$options{tests} = encode_json \@tests if @tests;
	$options{gensource} = $gensource if $gensource;
	$options{genformat} = $genformat if $genformat;
	$options{versource} = $versource if $versource;
	$options{verformat} = $verformat if $verformat;
	$db->problems->create (\%options);

	$db->contest_problems->create({problem => $id, contest => $contest}) if $contest;
}

sub cmd_set{
	my $file;
	GetOptions ( 'file!' => \$file );
	my ($id, %values) = @_;
	%values = map { $_ => scalar read_file $values{$_} } keys %values if $file;
	$db->problem($id)->update(\%values)
}

sub cmd_get{
	my ($id, $col) = @_;
	say $db->problem($id)->get_column($col)
}

sub cmd_list{
	local $, = "\n";
	say map {$_->id} $db->problems->all
}

sub cmd_rm{
	$db->problem(shift)->delete
}

sub cmd_show{
	my %columns = $db->problem(shift)->get_columns;
	print <<END
Name: $columns{name}
Author: $columns{author}
Statement written by: $columns{writer}
Owner: $columns{owner}
Level: $columns{level}
Output limit: $columns{olimit}
Time limit: $columns{timeout}
Test count: $columns{testcnt}
Generator: $columns{generator}
Runner: $columns{runner}
Judge: $columns{judge}
Private: $columns{private}
END
}

##################################################

my $cmd = 'cmd_' . shift;
cmd_help unless exists $main::{$cmd};
no strict 'refs';
$cmd->(@ARGV);

1;
__END__

=encoding utf-8

=head1 NAME

gruntmaster-problem - shell interface to Gruntmaster 6000 problems

=head1 SYNOPSIS

  gruntmaster-problem add problem_id
  gruntmaster-problem list
  gruntmaster-problem rm problem_id
  gruntmaster-problem show problem_id
  gruntmaster-problem set [--file] problem_id key value
  gruntmaster-problem get problem_id key

=head1 DESCRIPTION

gruntmaster-problem is a tool for managing problems.

=over

=item B<list>

Prints the list of problems in the selected contest.

=item B<show> I<id>

Prints detailed information about problem I<id>.

=item B<add> I<id>

Adds a new problem with id I<id>.

=item B<rm> I<id>

Removes the problem with id I<id>.

=item B<set> I<id> I<key> I<value>

Sets the I<key> configuration option of problem I<id> to I<value>.

=item B<get> I<id> I<key>

Get the value of the I<key> configuration option of problem I<id>

=item B<set> --file I<id> I<key> I<file>

Sets the I<key> configuration option of problem I<id> to the contents of the file I<file>.

=back

=head1 AUTHOR

Marius Gavrilescu E<lt>marius@ieval.roE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2014 by Marius Gavrilescu

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.18.1 or,
at your option, any later version of Perl 5 you may have available.


=cut
